# Build and check LDGLite x86 and x86_64 architectures unsing Qt/MinGW platform
version: 'LDGLite-AV-1.3.4.{build}'

clone_folder: c:\projects\ldglite

# skip automatic cloning because we want to restore cached items in the clone directory first
clone_script: echo skip

# we're caching qt5 for MinGW x86_64 and the LDraw library
cache:
 - '$(APPVEYOR_BUILD_FOLDER)\LDraw'

image: Visual Studio 2017

shallow_clone: true

branches:
  only:
   - master

configuration: release

matrix:
  fast_finish: true

environment:
  LP3D_DIST_DIR: lpub3d_windows_3rdparty
  LP3D_DIST_DIR_PATH: $(APPVEYOR_BUILD_FOLDER)\$(LP3D_DIST_DIR)
  LP3D_QT32_MSVC: C:\Qt\5.11.1\msvc2015\bin
  LP3D_QT64_MSVC: C:\Qt\5.11.1\msvc2017_64\bin

init:
 - ps: write-host "Building LDGLite x86 and x86_64 architectures..."
 - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
 - ps: |
      If ($env:APPVEYOR_REPO_COMMIT_MESSAGE.ToLower().Contains("[build pkg]")) {
        write-host "[build pkg] detected."
        $env:LDGL_BUILD_PKG = "yes"
      }
 - ps: |
      If ($env:APPVEYOR_REPO_COMMIT_MESSAGE.ToLower().Contains("[deploy pkg]")) {
        write-host "[deploy pkg] detected."
        $env:LDGL_BUILD_PKG = "yes"
        $env:LDGL_DEPLOY_PKG = $true
      }
 - ps: Get-ChildItem Env:* | Where-Object { $_.Name -match '^LP3D_*|^ldgl_*' } | Sort-Object Name

# We don't use git clone because the 'clone_directory' is not empty (restored cached components were added in previous steps) - so the
# git clone command will fail. Instead we use fetch and checkout to pretty much replicate the same behaviour as the default git clone.
# This includes setting the clone depth, and fetching the last commit and previous tags
install:
 - cmd: git init %APPVEYOR_BUILD_FOLDER%
 - cmd: cd %APPVEYOR_BUILD_FOLDER%
 - cmd: git remote add origin https://github.com/%APPVEYOR_REPO_NAME%.git
 - cmd: git fetch -qfup --depth=200 origin +%APPVEYOR_REPO_BRANCH% +refs/tags/*:refs/tags/*
 - cmd: git checkout -qf %APPVEYOR_REPO_COMMIT%

build_script:
 - ps: |
      write-host "  Distribution directory..[$env:LP3D_DIST_DIR_PATH]"
      write-host "  Working Directory.......[$PWD]"
      If ($env:LDGL_BUILD_PKG -eq "yes") {
        cmd.exe /c build.cmd -all -ins -chk 2`>`&1
        $env:LDGL_ARTEFACT_ITEM_COUNT = (Get-ChildItem -Path $env:LP3D_DIST_DIR_PATH -Recurse).count
        write-host "`n  Artifact count....[$env:LDGL_ARTEFACT_ITEM_COUNT]"
      } Else {
        cmd.exe /c build.cmd -all -chk 2`>`&1
      }

test: off

after_build:
 - ps: |
      If (($env:LDGL_BUILD_PKG -eq "yes") -and ([int]$env:LDGL_ARTEFACT_ITEM_COUNT -gt 5)) {
        cd $env:APPVEYOR_BUILD_FOLDER; write-host "Creating zip archive artefact from ./$env:LP3D_DIST_DIR..."
        7z a -tzip $env:LP3D_DIST_DIR $env:LP3D_DIST_DIR | Select-String -Pattern '(^Creating)|(^Everything)' -CaseSensitive; write-host "Zip archive $env:LP3D_DIST_DIR.zip created."
        $root = Resolve-Path $env:APPVEYOR_BUILD_FOLDER; [IO.Directory]::GetFiles($root.Path, '*.zip', 'TopDirectoryOnly') | % { Push-AppveyorArtifact $_ -Type zip -FileName $_.Substring($root.Path.Length + 1) -DeploymentName $env:LP3D_DIST_DIR}
      }

deploy:
 - provider: GitHub
   repository: trevorsandy/ldglite
   description: 'LDGLite - Windows archive package of LPub3D image renderer'
   auth_token:
     secure: rnf4qpF81ISjm8q13OgkAaoKZReXpjODhU9fbGFMhMydHrda1ezLubGXRU9OKGu4
   release: $(LP3D_DIST_DIR)
   artifact: $(LP3D_DIST_DIR).zip
   prerelease: true
   force_update: true
   on:
    branch: master
    ldgl_deploy_pkg: true
