# Build, check and LDGLite
# Trevor SANDY <trevor.sandy@gmail.com>
# Last Update: July 14, 2025
# Copyright (c) 2022 - 2025 by Trevor SANDY
#
name: Build LDGLite
on:
  push:
    branches:
      - master
jobs:
  build-linux:
    # if: ${{ false }} # uncomment to disabl
    name: Build Ubuntu 24.04
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Work Paths
        run: |
          echo "LDRAWDIR=${HOME}/ldraw" >> ${GITHUB_ENV}
          echo "LDGL_DIST_DIR=lpub3d_linux_3rdparty" >> ${GITHUB_ENV}
          if [ ! -d "${HOME}/work/ldglite/ldglite/${LDGL_DIST_DIR}" ]; then mkdir -p "${HOME}/work/ldglite/ldglite/${LDGL_DIST_DIR}"; fi
      - name: Install Qt 6.9.1 64bit
        uses: jurplel/install-qt-action@v4
        with: # install dir: is $RUNNER_WORKSPACE (one folder above the starting directory)
          version: 6.9.1
          host: linux
          target: desktop
          arch: linux_gcc_64
          cache: true
          cache-key-prefix: install-qt-action
      - name: Development Packages
        run: |
          echo -n "Install development packages..."
          (chmod a+x utils/install-dev-packages.sh && sudo ./utils/install-dev-packages.sh) && echo OK || echo Failed
      - name: Cache LDraw
        id: cache-ldraw
        uses: actions/cache@v4
        with:
          path: ${{ env.LDRAWDIR }}
          key: ldraw-lib
      - name: LDraw Library
        run: |
          if [ ! -d ${LDRAWDIR}/parts ]; then
            echo "LDraw library not found at ${LDRAWDIR}. Downloading library..."
            curl -s -O https://library.ldraw.org/library/updates/complete.zip
            unzip -d ~/ -q complete.zip; rm complete.zip
            if test -d ${LDRAWDIR}; then echo "LDraw library extracted, LDRAWDIR defined."; fi
          else
            echo "LDraw library defined at ${LDRAWDIR}."
          fi
      - name: Build LDGLite
        run: |
          qmake -v
          qmake CONFIG+=3RD_PARTY_INSTALL=${LDGL_DIST_DIR} CONFIG+=release CONFIG+=BUILD_CHECK
          make && make install

  build-windows:
    # if: ${{ false }} # uncomment to disable
    name: Build Windows ${{ matrix.name }}
    runs-on: ${{ matrix.runner-os }}
    strategy:
      fail-fast: false
      matrix:
        runner-os: [ windows-2025, windows-11-arm ]
        platform: [ AMD, ARM ]
        exclude:
          - runner-os: windows-2025
            platform: ARM
          - runner-os: windows-11-arm
            platform: AMD
        include:
          - runner-os: windows-2025
          - runner-os: windows-11-arm
          - platform: AMD
            name: 2025 AMD
            host: ''
            arch: _64
            build: -all_amd
            toolset-32bit: v142
          - platform: ARM
            name: 11 ARM
            host: _arm64
            arch: _arm64
            build: arm64
            toolset-32bit: v143

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Work Paths
        run: |
          Echo "GITHUB=True" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          Echo "LP3D_DIST_DIR_PATH=$(Join-Path (resolve-path ..\) 'lpub3d_windows_3rdparty')" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          Echo "LP3D_LDRAW_DIR_PATH=$(Join-Path (resolve-path $Env:USERPROFILE\) 'ldraw')" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          Echo "LP3D_3RD_PARTY_PATH=$(resolve-path ..\)" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          Echo "LP3D_BUILD_BASE=$(resolve-path ..\)" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          If ( -Not (Test-Path -Path $(Join-Path (resolve-path ..\) 'lpub3d_windows_3rdparty') ) ) { New-Item -ItemType directory -Path $(Join-Path (resolve-path ..\) 'lpub3d_windows_3rdparty') }
      - name: Cache LDraw
        id: cache-ldraw
        uses: actions/cache@v4
        with:
          path: ${{ env.LP3D_LDRAW_DIR_PATH }}
          key: ldraw-lib
      - name: Cache QtMSVC
        id: cache-qt
        uses: actions/cache@v4
        with:
          path: ${{ env.LP3D_BUILD_BASE }}\Qt
          key: qt-windows-${{ env.QT_CACHE }}
      - name: MSVC 141 Build Tools AMD
        if: "${{ matrix.platform == 'AMD' && matrix.toolset-32bit == 'v141' }}"
        run: |
          Set-Location "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
          $InstallPath = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
          $ComponentsToAdd= @("Microsoft.VisualStudio.Component.VC.v141.x86.x64")
          [string]$WorkloadArgs = $ComponentsToAdd | ForEach-Object {" --add " +  $_} # Use --remove to delete component
          $Arguments = ('/c', "vs_installer.exe", 'modify', '--installPath', "`"$InstallPath`"",$WorkloadArgs, '--quiet', '--norestart', '--nocache')
          # should be run twice
          $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden
          $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden
        shell: powershell
      - name: Windows 8.1 SDK AMD
        if: "${{ matrix.platform == 'AMD' && matrix.toolset-32bit == 'v141' }}"
        run: |
          Invoke-WebRequest -Method Get -Uri https://go.microsoft.com/fwlink/p/?LinkId=323507 -OutFile sdksetup.exe -UseBasicParsing
          Start-Process -Wait sdksetup.exe -ArgumentList "/q", "/norestart", "/features", "OptionId.WindowsDesktopSoftwareDevelopmentKit"
        shell: powershell
      - name: Qt MSVC 2019 32bit AMD # path: ..\Qt\5.15.2\msvc2019\bin
        if: "${{ matrix.platform == 'AMD' }}"
        uses: jurplel/install-qt-action@v4
        with:
          version: 5.15.2
          host: windows
          target: desktop
          arch: win32_msvc2019
          dir: ${{ env.LP3D_BUILD_BASE }}
          cache: true
          cache-key-prefix: install-qt-action
      - name: Qt MSVC 2022 64bit ${{ matrix.platform }} # path: ..\Qt\6.9.1\msvc2022_[64/arm64]\bin
        uses: jurplel/install-qt-action@v4
        with:
          version: 6.9.1
          host: windows${{ matrix.host }}
          target: desktop
          arch: win64_msvc2022${{ matrix.arch }}
          dir: ${{ env.LP3D_BUILD_BASE }}
          cache: true
          cache-key-prefix: install-qt-action
      - name: Build LDGLite ${{ matrix.platform }}
        shell: cmd
        run: .\build.cmd ${{ matrix.build }} -chk
        env:
          LP3D_QT32VCVERSION: 2019
          LP3D_QT64VCVERSION: 2022
          LP3D_QT32VERSION: 5.15.2
          LP3D_QT64VERSION: 6.9.1
          LP3D_VSVERSION: 2022
          LP3D_MSC32_VER: 1942
          LP3D_VC32SDKVER: 10.0
          LP3D_VC32TOOLSET: ${{ matrix.toolset-32bit }}
          LP3D_VC32VARSALL_VER: -vcvars_ver=14.2
          LP3D_MSC64_VER: 1944
          LP3D_VC64SDKVER: 10.0
          LP3D_VC64TOOLSET: v143
          LP3D_VC64VARSALL_VER: -vcvars_ver=14.4
          LP3D_MSCARM64_VER: 1944
          LP3D_VCARM64SDKVER: 10.0
          LP3D_VCARM64TOOLSET: v143
          LP3D_VCARM64VARSALL_VER: -vcvars_ver=14.4


  build-macos:
    # if: ${{ false }} # uncomment to disabl
    name: 'Build macOS ${{ matrix.runner-version }}'
    runs-on: macos-${{ matrix.runner-version }}
    strategy:
      fail-fast: false
      matrix:
        runner-version: [ 13, 14 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Work Paths
        run: |
          echo "LDRAWDIR=${HOME}/Library/LDraw" >> ${GITHUB_ENV}
          echo "LDGL_DIST_DIR=lpub3d_macos_3rdparty" >> ${GITHUB_ENV}
          if [ ! -d "${HOME}/work/ldglite/ldglite/${LDGL_DIST_DIR}" ]; then
            mkdir -p "${HOME}/work/ldglite/ldglite/${LDGL_DIST_DIR}"
          fi
      - name: Development Packages
        run: |
          if [ "$(uname -m)" = "x86_64" ]; then
            (cd macx/x86_64/png/lib && ln -s libpng16.a libpng.a)
            echo "/usr/local/opt/ccache/libexec" >> ${GITHUB_PATH}
          else
            echo "/opt/homebrew/opt/ccache/libexec" >> ${GITHUB_PATH}
          fi
          brew install grep ccache qt@6
          brew link --force qt@6;
          if [[ -d "/usr/X11/lib" && "/usr/X11/include" ]]; then
            echo "Good to go - X11 found."
          else
            brew install --cask xquartz
          fi

      - name: Cache LDraw
        id: cache-ldraw
        uses: actions/cache@v4
        with:
          path: ${{ env.LDRAWDIR }}
          key: ldraw-lib
      - name: LDraw Library
        run: |
          if [ ! -d ${LDRAWDIR}/parts ]; then
            echo "LDraw library not found at ${LDRAWDIR}. Downloading library..."
            curl -s -O https://library.ldraw.org/library/updates/complete.zip
            unzip -d ${HOME}/Library -q complete.zip; rm complete.zip
            if test -d ${LDRAWDIR}; then echo "LDraw library extracted, LDRAWDIR defined."; fi
          fi
          echo "set LDRAWDIR in environment.plist..."
          chmod a+x app/set-ldrawdir.command && sudo ./app/set-ldrawdir.command
          grep -A1 -e 'LDRAWDIR' ${HOME}/.MacOSX/environment.plist
          echo "LDraw library defined at ${LDRAWDIR}."
      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v2
        id: cpu-cores
      - name: Build macOS ${{ matrix.runner-version }}
        run: |
          qmake -v
          qmake CONFIG+=3RD_PARTY_INSTALL=../${LDGL_DIST_DIR} CONFIG+=release CONFIG+=BUILD_CHECK
          make -j${{ steps.cpu-cores.outputs.count }} && make install
